@page "/event-details/{eventId}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer

<PageTitle>Event Details</PageTitle>

@if (Event == null)
{
    <p>Loading...</p>
}
else
{
    <div class="details-container">
        <h1>@Event.Name</h1>
        <img src="/images/EventImages/@Event.ImageUrl" class="img-fluid" alt="@Event.Name" style="width: 50%" />
        <p>Address: @Event.Address</p>
        <p>Date: @Event.Date.ToString("dddd, dd MMMM yyyy")</p>
        <p>Description: @Event.Description</p>
        <p>Price: @Event.Price $</p>
        <p>Category: @Event.Category</p>

        <h2>Event Admin Information</h2>
        <p>Admin Name: @Event.User.FirstName @Event.User.LastName</p>
        <p>Phone: @Event.User.PhoneNumber</p>
        <p>Email: @Event.User.Email</p>

        <a href="@($"ticketpurchasepage/{EventId}")" class="btn btn-primary">Order Tickets</a>
        <button @onclick="ToggleFavorite" class="btn btn-secondary">
            @if (IsFavorite)
            {
                <span>Remove from Favorites</span>
            }
            else
            {
                <span>Add to Favorites</span>
            }
        </button>
    </div>
}

@code {
    [Parameter]
    public string EventId { get; set; }

    private Event Event;
    private bool IsFavorite = false;


    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(EventId, out int id))
        {
            Event = await HttpClient.GetFromJsonAsync<Event>($"https://localhost:7206/api/Events/{id}");
        }
        else
        {
            //error page 
        }
    }
    private async Task ToggleFavorite()
    {
        if (int.TryParse(EventId, out int id))
        {
            var favorites = await LocalStorage.GetItemAsync<List<int>>("favoriteEvents") ?? new List<int>();

            if (IsFavorite)
            {
                favorites.Remove(id);
            }
            else
            {
                favorites.Add(id);
            }

            await LocalStorage.SetItemAsync("favoriteEvents", favorites);
            IsFavorite = !IsFavorite;
        }
    }
    private async Task<bool> IsEventFavorite(int eventId)
    {
        var favorites = await LocalStorage.GetItemAsync<List<int>>("favoriteEvents") ?? new List<int>();
        return favorites.Contains(eventId);
    }
}
