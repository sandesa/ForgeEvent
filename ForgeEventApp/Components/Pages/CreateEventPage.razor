@page "/createeventpage"
@inject HttpClient HttpClient
@inject ForgeEventApp.Interfaces.IValidations FORMSUCCESS

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Event</h4>


<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="newEvent" OnValidSubmit="AddEvent" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="newEvent.Name" class="form-control" />
                <ValidationMessage For="() => newEvent.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="imageurl" class="form-label">ImageUrl:</label>
                <InputText id="imageurl" @bind-Value="newEvent.ImageUrl" class="form-control" />
                <ValidationMessage For="() => newEvent.ImageUrl" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="ticketamount" class="form-label">TicketAmount:</label>
                <InputNumber id="ticketamount" @bind-Value="newEvent.TicketAmount" class="form-control" />
                <ValidationMessage For="() => newEvent.TicketAmount" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="address" class="form-label">Address:</label>
                <InputText id="address" @bind-Value="newEvent.Address" class="form-control" />
                <ValidationMessage For="() => newEvent.Address" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="newEvent.Date" class="form-control" />
                <ValidationMessage For="() => newEvent.Date" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="newEvent.Description" class="form-control" />
                <ValidationMessage For="() => newEvent.Description" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber id="price" @bind-Value="newEvent.Price" class="form-control" />
                <ValidationMessage For="() => newEvent.Price" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>

                  <InputSelect id="category" @bind-Value="newEvent.Category" class="form-control">
                        @foreach (var category in Enum.GetValues(typeof(Category)))
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => newEvent.Category" class="text-danger" />
                
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
            @if (showSuccessMessage)
            {
                <div class="alert alert-success" role="alert">
                    Event has been created!
                </div>
            }
        </EditForm>
    </div>
</div>



@code {
    private IEnumerable< string>? CategoriesDisplay;

    protected override async Task OnInitializedAsync()
    {
        CategoriesDisplay = await HttpClient.GetFromJsonAsync<IEnumerable<string>>("https://localhost:7206/api/Events/categories");
    }
    
    [SupplyParameterFromForm]
    public Event newEvent { get; set; } = new();

    private bool showSuccessMessage = false;

    public async Task AddEvent()
    {
        await HttpClient.PostAsJsonAsync($"https://localhost:7206/api/Events/{newEvent}", newEvent);
        
            await FORMSUCCESS.SubmitFormAsync(() =>
            {
                showSuccessMessage = true;
                newEvent = new Event();
                FORMSUCCESS.RestValidFormBool();
            });
    }
}