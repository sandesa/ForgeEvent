@page "/profilepage/{UserId:int}/bookingdetails/{bookingId:int}"
@using ForgeEventApp.Components.Layout
@inject IBookingRepository BookingRepository
@inject IRatingRepository RatingRepository
@inject IValidations ValidDisplay
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@layout ProfilePageLayout
@rendermode InteractiveServer


<PageTitle>Booking Details</PageTitle>

@if (booking is null)
{
    <p>Loading...</p>
}
else
{
    <div class="d-flex">
        <div class="details-container">
            <div>
                <h1 style="width: auto" class="text-center">@booking.Event.Name</h1>
                <img src="/images/EventImages/@booking.Event.ImageUrl" class="img-fluid" alt="@booking.Event.Name" style="width: auto" />
            </div>
            <div class="d-flex">
                <div>
                    <p class="mt-2 "><strong>Address:</strong> @booking.Event.Address</p>
                    <p><strong>Date:</strong> @booking.Event.Date.ToString("dddd, dd MMMM yyyy, kl: HH:MM")</p>
                    <p><strong>Description:</strong> @booking.Event.Description</p>
                    <p><strong>Price:</strong> @booking.Event.Price $</p>
                    <p><strong>Category:</strong> @ValidDisplay.DisplayCategory(booking.Event.Category)</p>
                    <h5><b>Event Admin Information</b></h5>
                    <p><strong>Admin Name:</strong> @booking.Event.User.FirstName @booking.Event.User.LastName</p>
                    <p><strong>Phone:</strong> @booking.Event.User.PhoneNumber</p>
                    <p><strong>Email:</strong> @booking.Event.User.Email</p>
                </div>
                    @if (rateEvent)
                    {
                        <div class="mx-auto my-4">
                        @if (NewRating is null)
                        {
                            <p>Loading...</p>
                        }
                        else
                        {
                            <EditForm Enhance="true" Model="NewRating" OnValidSubmit="HandleValidSubmit" class="container d-flex flex-column" FormName="addRating">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row justify-content-center">
                                    <div class="mb-4" style="width: 100px">
                                        <label for="score-input"><strong>Score</strong></label>
                                        <InputNumber @bind-Value="NewRating.Score" Min="1" Max="5" class="form-control" id="score-input" />
                                    </div>

                                    <div class="mb-4" style="width: 500px">
                                        <InputTextArea @bind-Value="NewRating.Comment" placeholder="Leave a comment..." class="form-control" />
                                    </div>

                                </div>
                                <div class="d-flex justify-content-center">
                                    <button type="submit" class="btn btn-primary mb-4 mx-2">Submit</button>
                                    <button class="btn btn-secondary mb-4 mx-2" @onclick="RateStatusChange">Back</button>
                                </div>
                            </EditForm>
                        }
                    </div>
                }
                else
                {
                    <div class="ms-auto my-2">
                        <button class="btn btn-primary" @onclick="RateStatusChange">Rate the event</button>   
                    </div>
                }
            </div>
        </div>
        <div class="mx-5 my-5">

            @if (booking is not null )
            {
                <div class="card mx-auto mb-2" style="max-width: 600px;">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3>Booking details:</h3>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><strong>Number of tickets:</strong> @booking.TicketAmount</p>
                        <p class="card-text"><strong>Ticket price:</strong> @booking.Event.Price $</p>
                        <p class="card-text"><strong>Total price:</strong> @booking.TotalPrice $</p>
                        <p class="card-text"><strong>Tickets sent to:</strong> @booking.User.Email</p>
                        <p class="card-text"><strong>Purchased:</strong> @booking.CreatedAt.ToString("dddd, dd MMMM yyyy, kl: HH:MM")</p>
                    </div>
                </div>
            }
            else
            {
                <p>No info</p>
            }

            @if (RatingFromUser is not null && RatingFromUser.Any())
            {
                <h4 class="mt-5">Your Rating:</h4>
                @foreach (var rating in RatingFromUser)
                {
                    <div class="card mx-auto mb-2 rating-card-container">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                @for (int i = 0; i < rating.Score; i++)
                                {
                                    <span><Icon Name="IconName.StarFill" Color="IconColor.Warning" Size="IconSize.x5" /></span>
                                }
                            </div>
                            <div class="">
                                <button class="remove-btn" @onclick="async () => await RemoveRating(rating.Id)"><Icon Name="IconName.XLg" Class="remove-btn" /></button>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@rating.Comment</p>
                            <p class="card-text"><strong>Created:</strong> @rating.CreatedAt</p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int BookingId { get; set; }

    [Parameter]
    public int UserId { get; set; }

    private Booking? booking;

    public Rating? NewRating { get; set; } = new();

    private IEnumerable<Rating>? RatingFromUser;

    private bool rateEvent = false;

    protected override async Task OnInitializedAsync()
    {
        booking = await HttpClient.GetFromJsonAsync<Booking>($"https://localhost:7206/api/Bookings/booking/{BookingId}");
        await LoadRatingsAsync();
    }

    private void RateStatusChange()
    {
        rateEvent = !rateEvent;
    }

    private void ResetRating()
    {
        if(NewRating is not null)
        {
            NewRating = new();
        }
    }

    private async Task LoadRatingsAsync()
    {
        RatingFromUser = await RatingRepository.GetAllRatingsFromUserForEventAsync(booking.Event.Id, UserId);
    }

    private async Task RemoveRating(int ratingId)
    {
        await RatingRepository.RemoveRatingAsync(ratingId);
        await LoadRatingsAsync();
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        await RatingRepository.AddRatingAsync(NewRating, UserId, booking.Event.Id);
        await LoadRatingsAsync();
        RateStatusChange();
        StateHasChanged();
        ResetRating();
    }
}

<style>
    .remove-btn {
        border: none;
        background: inherit;
    }

    .rating-card-container {
        max-width: 600px;
    }

    .rating-card-container .remove-btn {
        display: none;
    }

    .rating-card-container:hover .remove-btn {
        display: block;
    }
</style>
