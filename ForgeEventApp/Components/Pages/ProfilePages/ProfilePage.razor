@page "/profilepage/{UserId:int}"
@using ForgeEventApp.Components.Layout
@using ForgeEventApp.Interfaces
@using ForgeEventApp.Models
@inject HttpClient httpClient
@inject IBookingService IBookingService
@layout ProfilePageLayout
@inject ILocalStorageService LocalStorage
@rendermode InteractiveServer

<PageTitle>Profile Page</PageTitle>

<h3 class="text-center">Your profile</h3>
<div class="page">
    <div class="content px-4">
        @if (profile == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <table class="table table-striped mx-auto" style="width: 500px">
                <tbody>
                    <tr>
                        <th scope="row">Name</th>
                        <td>@profile.FirstName @profile.LastName</td>
                    </tr>
                    <tr>
                        <th scope="row">Email</th>
                        <td>@profile.Email</td>
                    </tr>
                    <tr>
                        <th scope="row">Phone number</th>
                        <td>@profile.PhoneNumber</td>
                    </tr>
                </tbody>
            </table>
        }
    </div>
    <h3>Favorited Events</h3>
    @if (favoriteEvents == null)
    {
        <p>Loading favorite events...</p>
    }
    else if (!favoriteEvents.Any())
    {
        <p>No favorite events found.</p>
    }
    else
    {
        <ul>
            @foreach (var eventItem in favoriteEvents)
            {
                <li>
                    <strong>@eventItem.Name</strong><br />
                    Date: @eventItem.Date.ToString("dddd, dd MMMM yyyy")<br />
                    Price: @eventItem.Price $
                </li>
            }
        </ul>
    }

</div>

@code {
    private User? profile;
    private IEnumerable<Booking>? bookings;
    private List<Event> favoriteEvents = new List<Event>();

    [Parameter]
    public int UserId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        profile = await httpClient.GetFromJsonAsync<User>($"https://localhost:7206/api/Users/{UserId}");
        bookings = await IBookingService.GetAllBookingsByUserIdAsync(UserId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFavoriteEvents();
            StateHasChanged();
        }
    }

    private async Task LoadFavoriteEvents()
    {
        var favoriteEventIds = await LocalStorage.GetItemAsync<List<int>>("favoriteEvents") ?? new List<int>();

        foreach (var eventId in favoriteEventIds)
        {
            var eventItem = await httpClient.GetFromJsonAsync<Event>($"https://localhost:7206/api/Events/{eventId}");
            if (eventItem != null)
            {
                favoriteEvents.Add(eventItem);
            }
        }
    }
}
