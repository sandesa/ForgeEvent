@page "/profilepage/{UserId:int}/admin-event-details/{EventId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using ForgeEventApp.Components.Layout
@layout ProfilePageLayout
@inject IValidations ValidDisplay
@rendermode InteractiveServer

<PageTitle>Event Details</PageTitle>

@if (Event == null)
{
    <p>Loading...</p>
}
else
{
    <div class="d-flex">
        <div style="width: 70%; max-width: 1280px">
            <div style="">
                <h1 class="text-center">@Event.Name</h1>
                <img src="/images/EventImages/@Event.ImageUrl" class="img-fluid" alt="@Event.Name"   />
            </div>
            <div class="d-flex flex-row">
                <div>
                    <p class="mt-2"><strong>Address:</strong> @Event.Address</p>
                    <p><strong>Date:</strong> @Event.Date.ToString("dddd, dd MMMM yyyy, kl: HH:MM")</p>
                    <p><strong>Description:</strong> @Event.Description</p>
                    <p><strong>Price:</strong> @Event.Price $</p>
                    <p><strong>Category:</strong> @ValidDisplay.DisplayCategory(Event.Category)</p>
                    @if(ticketsLeft > 0)
                    {
                        <p><strong>Ticktes left:</strong> @ticketsLeft</p>
                    }
                    else
                    {
                        <p><span class="text-success">SOLD OUT!</span> (<strong>Ticktes left:</strong> @ticketsLeft)</p>
                    }

                    <h5><b>Event Admin Information</b></h5>
                    <p><strong>Admin Name:</strong> @Event.User.FirstName @Event.User.LastName</p>
                    <p><strong>Phone:</strong> @Event.User.PhoneNumber</p>
                    <p><strong>Email:</strong> @Event.User.Email</p>
                </div>
                <div class="d-flex flex-row justify-content-end my-1" style="width: 100%; height: 60px">
                    @if (!alertDelete)
                    {
                        <a class="btn btn-secondary mb-4 " href="/profilepage/@UserId/edit-event/@EventId">Edit</a>
                        <a class="btn btn-primary mb-4 mx-4">View event statistics</a>
                        <button class="btn btn-danger mb-4" @onclick="AlertDeleteChange">Remove</button>
                    }
                    else
                    {
                        <div class="d-flex">
                            <p class="mt-2">Are you sure you want to <strong>remove</strong> the event?</p>
                            <button class="btn btn-danger mb-4 mx-2" @onclick="async () => await RemoveEvent()">Yes</button>
                            <button class="btn btn-secondary mb-4" @onclick="AlertDeleteChange">No</button>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="mx-auto my-2 ">

            @if (ratings != null && ratings.Any())
            {
                <h3>Ratings</h3>
                <p><strong>Average score:</strong> @score / 5</p>

                @foreach (var rating in ratings)
                {
                    <div class="card mx-auto mb-2" style="max-width: 600px;">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                @for (int i = 0; i < rating.Score; i++)
                                {
                                    <span><Icon Name="IconName.StarFill" Color="IconColor.Warning" Size="IconSize.x5" /></span>
                                }
                            </div>
                            <div>
                                <span><strong>By user:</strong> @rating.User.FirstName</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@rating.Comment</p>
                            <p class="card-text"><strong>Created:</strong> @rating.CreatedAt</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="my-1 mx-4">
                    <h3>Ratings</h3>
                    <p>No ratings yet</p>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int EventId { get; set; }

    [Parameter]
    public int UserId { get; set; }

    private Event? Event;
    private IEnumerable<Rating>? ratings;
    private decimal score = 0;
    private int ticketsLeft = 0;
    private bool alertDelete = false;

    protected override async Task OnInitializedAsync()
    {
        {
            Event = await HttpClient.GetFromJsonAsync<Event>($"https://localhost:7206/api/Events/{EventId}");
            ratings = await HttpClient.GetFromJsonAsync<IEnumerable<Rating>>($"https://localhost:7206/api/Ratings/{EventId}");
            ticketsLeft = await HttpClient.GetFromJsonAsync<int>($"https://localhost:7206/api/Events/ticket/{EventId}");

            if(ratings != null && ratings.Any())
            {
                score = await HttpClient.GetFromJsonAsync<decimal>($"https://localhost:7206/api/Ratings/avargerating/{EventId}");
            }
        }
    }

    private async Task RemoveEvent()
    {
        await HttpClient.DeleteFromJsonAsync<Event>($"https://localhost:7206/api/Events/delete/{EventId}");
        NavigationManager.NavigateTo($"/profilepage/{UserId}/posted-events");
    }

    private void AlertDeleteChange()
    {
        alertDelete = !alertDelete;
    }
}
