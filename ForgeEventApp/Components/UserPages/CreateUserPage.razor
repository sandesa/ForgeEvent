@page "/createuserpage"
@inject ForgeEventApp.Interfaces.IUserRepository CREATE
@inject ForgeEventApp.Interfaces.IValidations FORMSUCCESS
@using ForgeEventApp.Functions
@using ForgeEventApp.Models
@attribute [StreamRendering]

<h3>CreateUserPage</h3>
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="firstname" class="form-label">firstname:</label>
                <InputText id="firstname" @bind-Value="User.FirstName" class="form-control" />
                <ValidationMessage For="() => User.FirstName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">lastname:</label>
                <InputText id="lastname" @bind-Value="User.LastName" class="form-control" />
                <ValidationMessage For="() => User.LastName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">email:</label>
                <InputText type="email" id="email" @bind-Value="User.Email" class="form-control" />
                <ValidationMessage For="() => User.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="phonenumber" class="form-label">Phonenumber:</label>
                <InputText id="phonenumber" @bind-Value="User.PhoneNumber" class="form-control" />
                <ValidationMessage For="() => User.PhoneNumber" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText type="password" id="password" @bind-Value="User.Password" class="form-control" />
                <ValidationMessage For="() => User.Password" class="text-danger" />
            </div>
            <input type="hidden" id="rolehidden"  @bind="User.Role" /> 
            <div class="mb-3">
                <label class="form-label">Role:</label>
                
                <div>
                    <input type="radio" id="admin" name="role" value="Admin" @* checked="@IsRoleChecked(Role.Admin)" *@ @onchange="@(c => User.Role=Role.Admin)" />
                    <label for="admin">Admin</label>
                </div>
                <div>
                    <input type="radio" id="user" name="role" value="Account" @* checked="@IsRoleChecked(Role.Account)" *@ @onchange="@(c => User.Role=Role.Account)" />
                    <label for="user">User</label>
                </div>
                <ValidationMessage For="() => User.Role" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
            @if (showSuccessMessage)
            {
                <div class="alert alert-success" role="alert">
                    User has been created!
                </div>
            }
        </EditForm>
    </div>
</div>
      
      

@code {
    [SupplyParameterFromForm]
    public User User{ get; set; } = new();
    private bool showSuccessMessage = false;

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddUser()
    {
        await CREATE.CreateUserAsync(User);

        await FORMSUCCESS.SubmitFormAsync(() =>
        {
            showSuccessMessage = true;
            FORMSUCCESS.RestValidFormBool();
        });
    }
    //private bool IsRoleChecked(Role role) 
    // {
    //     return User.Role == role;
    // }
} 

    